// SOVR Pay Checkout System - Prisma Schema
// Blockchain-based payment processing for retailers

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/sovr_pay_checkout/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User/Retailer Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Retailer profile
  retailer      Retailer?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Retailer Management
model Retailer {
  id              String    @id @default(cuid())
  userId          String    @unique
  companyName     String
  contactName     String?
  businessType    String
  walletAddress   String?   // Polygon wallet address for receiving settlements
  isActive        Boolean   @default(true)
  allowlisted     Boolean   @default(false) // Security allowlist
  apiKey          String    @unique @default(cuid()) // For API access
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  payments        Payment[]
  settlements     Settlement[]
  apiLogs         ApiLog[]
  webhookUrls     WebhookUrl[]
  
  @@map("retailers")
}

// Webhook Configuration
model WebhookUrl {
  id          String   @id @default(cuid())
  retailerId  String
  url         String
  eventTypes  String[] // Array of event types to send
  isActive    Boolean  @default(true)
  secret      String   @default(cuid()) // For webhook signature verification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  retailer    Retailer @relation(fields: [retailerId], references: [id], onDelete: Cascade)
  
  @@map("webhook_urls")
}

// Payment Processing
model Payment {
  id                String      @id @default(cuid())
  retailerId        String
  amount            String      // SOVR Credit amount (stored as string for precision)
  currency          String      @default("USD")
  status            PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod
  
  // Customer information
  customerEmail     String?
  customerWallet    String?     // Customer's Polygon wallet address
  
  // Order information
  orderId           String?     // Retailer's order ID
  description       String?
  metadata          Json?       // Additional data from retailer
  
  // Blockchain data
  transactionHash   String?     // Polygon transaction hash
  blockNumber       BigInt?     // Block number of transaction
  gasUsed           BigInt?     // Gas used for transaction
  
  // Settlement tracking
  settlementId      String?
  settlementType    SettlementType?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  expiresAt         DateTime?   // Payment expiration
  
  retailer          Retailer    @relation(fields: [retailerId], references: [id])
  settlement        Settlement? @relation(fields: [settlementId], references: [id])
  
  // Indexes for performance
  @@index([retailerId, status])
  @@index([transactionHash])
  @@index([createdAt])
  @@map("payments")
}

// Settlement Management
model Settlement {
  id                String          @id @default(cuid())
  retailerId        String
  settlementType    SettlementType
  totalAmount       String          // Total SOVR Credit amount settled
  status            SettlementStatus @default(PENDING)
  
  // Blockchain transaction details
  transactionHash   String?         // Settlement transaction hash
  blockNumber       BigInt?
  gasUsed           BigInt?
  burnAmount        String?         // Amount burned in settlement
  
  // Event data from smart contract
  eventSignature    String?         // Event signature hash
  eventData         Json?           // Raw event data
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  confirmedAt       DateTime?       // When settlement was confirmed on-chain
  
  retailer          Retailer        @relation(fields: [retailerId], references: [id])
  payments          Payment[]
  
  @@index([retailerId, status])
  @@index([transactionHash])
  @@map("settlements")
}

// Blockchain Event Tracking
model BlockchainEvent {
  id              String    @id @default(cuid())
  eventType       String    // POSPurchase, TransferWithNote, CreditIssued
  contractAddress String
  transactionHash String
  blockNumber     BigInt
  logIndex        Int
  
  // Event data
  eventData       Json      // Decoded event data
  rawData         Json      // Raw log data
  
  // Processing status
  processed       Boolean   @default(false)
  processingError String?
  
  createdAt       DateTime  @default(now())
  processedAt     DateTime?
  
  @@unique([transactionHash, logIndex])
  @@index([eventType, processed])
  @@index([blockNumber])
  @@map("blockchain_events")
}

// API Access Logging and Rate Limiting
model ApiLog {
  id          String    @id @default(cuid())
  retailerId  String
  endpoint    String
  method      String
  ipAddress   String
  userAgent   String?
  requestBody Json?
  responseCode Int
  responseTime Int      // Response time in milliseconds
  
  createdAt   DateTime  @default(now())
  
  retailer    Retailer  @relation(fields: [retailerId], references: [id])
  
  @@index([retailerId, createdAt])
  @@index([ipAddress, createdAt])
  @@map("api_logs")
}

model RateLimit {
  id          String    @id @default(cuid())
  identifier  String    // Could be retailer ID, IP address, or API key
  endpoint    String
  count       Int       @default(0)
  windowStart DateTime  @default(now())
  windowEnd   DateTime
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([identifier, endpoint, windowStart])
  @@index([windowEnd])
  @@map("rate_limits")
}

// System Configuration
model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("system_config")
}

// Enums
enum PaymentStatus {
  PENDING
  PROCESSING
  CONFIRMED
  FAILED
  EXPIRED
  CANCELLED
}

enum PaymentMethod {
  WALLET_CONNECT
  QR_CODE
  DIRECT_TRANSFER
}

enum SettlementType {
  BURN_FOR_POS
  APPROVE_AND_BURN
}

enum SettlementStatus {
  PENDING
  PROCESSING
  CONFIRMED
  FAILED
}
